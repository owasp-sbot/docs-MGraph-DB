{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MGraph-DB Documentation","text":"<p>Welcome to the documentation for MGraph-DB, a powerful graph database solution.</p>"},{"location":"#overview","title":"Overview","text":"<p>MGraph-DB is designed to efficiently store, query, and manage graph data. Whether you're building a social network, knowledge graph, or recommendation system, MGraph-DB provides the tools and performance you need.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>High-performance graph operations</li> <li>Intuitive query language</li> <li>Scalable architecture</li> <li>Comprehensive Python API</li> <li>Extensive documentation and examples</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Check out the Getting Started guide to begin using MGraph-DB in your projects.</p>"},{"location":"getting-started/","title":"Getting Started with MGraph-DB","text":"<p>This guide will help you install and set up MGraph-DB for your project.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>pip install mgraph-db\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<pre><code>def test_basic_graph_operations():\n    from mgraph_db.mgraph.MGraph import MGraph\n\n    # Create a new graph\n    mgraph = MGraph()\n\n    with mgraph.edit() as edit:\n        # Create two nodes\n        node1 = edit.new_node(node_data={\"value\": \"First Node\"})\n        node2 = edit.new_node(node_data={\"value\": \"Second Node\"})\n\n        # Connect nodes with an edge\n        edge = edit.new_edge(from_node_id=node1.node_id, \n                            to_node_id=node2.node_id)\n\n        # Verify nodes and edge were created\n        assert node1.node_id is not None\n        assert node2.node_id is not None\n        assert edge.edge_id is not None\n\n    # Query the graph\n    with mgraph.data() as data:\n        nodes = data.nodes()\n        edges = data.edges()\n\n        assert len(nodes) == 2\n        assert len(edges) == 1\n</code></pre>"}]}